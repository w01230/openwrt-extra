#!/bin/sh /etc/rc.common
#
# Copyright (C) 2015 OpenWrt-dist
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=96
STOP=16

CONFIG=shadowsocks
CONFIG_FILE=/var/etc/$CONFIG.json

uci_get_by_name() {
	local ret=$(uci get $CONFIG.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local index=0
	if [ -n $4 ]; then
		index=$4
	fi
	local ret=$(uci get $CONFIG.@$1[$index].$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_bool_by_name() {
	case "$(uci_get_by_name $1 $2)" in
		1|on|true|yes|enabled) return 0;;
	esac
	return 1
}

get_lan_hosts() {
	uci_bool_by_name $1 enable && \
		echo "$(uci_get_by_name $1 type),$(uci_get_by_name $1 host)"
}

gen_config_file() {
	cat <<-EOF >$CONFIG_FILE
		{
		    "server": "$(uci_get_by_name $1 server)",
		    "server_port": $(uci_get_by_name $1 server_port),
		    "local_address": "0.0.0.0",
		    "local_port": $(uci_get_by_name $1 local_port),
		    "password": "$(uci_get_by_name $1 password)",
		    "timeout": $(uci_get_by_name $1 timeout 60),
		    "method": "$(uci_get_by_name $1 encrypt_method)"
		}
EOF
}

load_config() {
	GLOBAL_SERVER=$(uci_get_by_type global global_server nil)
	if [ $GLOBAL_SERVER == "nil" ]; then
		return 1
	fi
	PROXY_MODE=$(uci_get_by_type global proxy_mode gfwlist)
	DNS_MODE=$(uci_get_by_type global dns_mode ss-tunnel)
	DNS_FORWARD=$(uci_get_by_type global dns_forward 8.8.8.8:53)
	
	SERVER=$(uci_get_by_name $GLOBAL_SERVER server)
	LOCAL_PORT=$(uci_get_by_name $GLOBAL_SERVER local_port)
	gen_config_file $GLOBAL_SERVER

	return 0
}

start_redir() {
	mkdir -p /var/run /var/etc
	/usr/bin/ss-redir \
	-c $CONFIG_FILE \
	-u \
	-f /var/run/ss-redir.pid
}

start_dns() {
	case "$DNS_MODE" in
	ss-tunnel)
		/usr/bin/ss-tunnel \
		-c $CONFIG_FILE $ARG_OTA ${ARG_UDP:="-u"} \
		-l 5300 \
		-L $DNS_FORWARD \
		-f /var/run/ss-tunnel.pid
	;;
	https-dns-proxy)
		/etc/init.d/https-dns-proxy restart
	;;
	esac
}
stop_dns() {
	case "$DNS_MODE" in
	ss-tunnel)
		/etc/init.d/https-dns-proxy disable
		/etc/init.d/https-dns-proxy stop
	;;
	https-dns-proxy)
		killall -q -9 ss-tunnel 2>/dev/null
	;;
	esac
}
set_ss_nat() {
	LAN_HOSTS="$(config_foreach get_lan_hosts lan_hosts)"
	case "$PROXY_MODE" in
	disable)
		/usr/bin/ss-rules -f
	;;
	global)
		/usr/bin/ss-rules -s $SERVER -l $LOCAL_PORT -d SS_SPEC_WAN_FW -o -u -a $LAN_HOSTS -I br-lan
	;;
	gfwlist)
		/usr/bin/ss-rules -s $SERVER -l $LOCAL_PORT -b "0.0.0.0/1 128.0.0.0/1" -d SS_SPEC_WAN_AC -o -u -a $LAN_HOSTS -I br-lan
	;;
	chnroute)
		/usr/bin/ss-rules -s $SERVER -l $LOCAL_PORT -B /etc/shadowsocks/chnroute.txt -d SS_SPEC_WAN_AC -o -u -a $LAN_HOSTS	-I br-lan
	;;
	esac
}

start() {
	load_config
	if [ $? -eq 0 ]; then
		stop_dns
		start_redir
		start_dns
		set_ss_nat
	fi
	if [ -z `grep "conf-dir=/etc/dnsmasq.d" /etc/dnsmasq.conf` ]; then
		sed -i '$a conf-dir=/etc/dnsmasq.d' /etc/dnsmasq.conf 
	fi
	/etc/init.d/dnsmasq restart
}

stop() {
	/usr/bin/ss-rules -f
	killall -q -9 ss-redir 2>/dev/null
	killall -q -9 ss-tunnel 2>/dev/null
	/etc/init.d/unbound stop 2>/dev/null
}

restart() {
	stop
	sleep 1
	start
}
